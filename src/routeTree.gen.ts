/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardScheduleRouteImport } from './routes/dashboard/schedule'
import { Route as DashboardPostsRouteImport } from './routes/dashboard/posts'
import { Route as DashboardAnalyticsRouteImport } from './routes/dashboard/analytics'
import { Route as DashboardAiRouteImport } from './routes/dashboard/ai'
import { Route as ApiUserRouteImport } from './routes/api/user'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardScheduleRoute = DashboardScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardPostsRoute = DashboardPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAnalyticsRoute = DashboardAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAiRoute = DashboardAiRouteImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => DashboardRoute,
} as any)
const ApiUserRoute = ApiUserRouteImport.update({
  id: '/api/user',
  path: '/api/user',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/signup': typeof SignupRoute
  '/api/user': typeof ApiUserRoute
  '/dashboard/ai': typeof DashboardAiRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/posts': typeof DashboardPostsRoute
  '/dashboard/schedule': typeof DashboardScheduleRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/signup': typeof SignupRoute
  '/api/user': typeof ApiUserRoute
  '/dashboard/ai': typeof DashboardAiRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/posts': typeof DashboardPostsRoute
  '/dashboard/schedule': typeof DashboardScheduleRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/signup': typeof SignupRoute
  '/api/user': typeof ApiUserRoute
  '/dashboard/ai': typeof DashboardAiRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/posts': typeof DashboardPostsRoute
  '/dashboard/schedule': typeof DashboardScheduleRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/features'
    | '/login'
    | '/pricing'
    | '/signup'
    | '/api/user'
    | '/dashboard/ai'
    | '/dashboard/analytics'
    | '/dashboard/posts'
    | '/dashboard/schedule'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/features'
    | '/login'
    | '/pricing'
    | '/signup'
    | '/api/user'
    | '/dashboard/ai'
    | '/dashboard/analytics'
    | '/dashboard/posts'
    | '/dashboard/schedule'
    | '/dashboard/settings'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/features'
    | '/login'
    | '/pricing'
    | '/signup'
    | '/api/user'
    | '/dashboard/ai'
    | '/dashboard/analytics'
    | '/dashboard/posts'
    | '/dashboard/schedule'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  FeaturesRoute: typeof FeaturesRoute
  LoginRoute: typeof LoginRoute
  PricingRoute: typeof PricingRoute
  SignupRoute: typeof SignupRoute
  ApiUserRoute: typeof ApiUserRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/schedule': {
      id: '/dashboard/schedule'
      path: '/schedule'
      fullPath: '/dashboard/schedule'
      preLoaderRoute: typeof DashboardScheduleRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/posts': {
      id: '/dashboard/posts'
      path: '/posts'
      fullPath: '/dashboard/posts'
      preLoaderRoute: typeof DashboardPostsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/analytics': {
      id: '/dashboard/analytics'
      path: '/analytics'
      fullPath: '/dashboard/analytics'
      preLoaderRoute: typeof DashboardAnalyticsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/ai': {
      id: '/dashboard/ai'
      path: '/ai'
      fullPath: '/dashboard/ai'
      preLoaderRoute: typeof DashboardAiRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/api/user': {
      id: '/api/user'
      path: '/api/user'
      fullPath: '/api/user'
      preLoaderRoute: typeof ApiUserRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardAiRoute: typeof DashboardAiRoute
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute
  DashboardPostsRoute: typeof DashboardPostsRoute
  DashboardScheduleRoute: typeof DashboardScheduleRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAiRoute: DashboardAiRoute,
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardPostsRoute: DashboardPostsRoute,
  DashboardScheduleRoute: DashboardScheduleRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  FeaturesRoute: FeaturesRoute,
  LoginRoute: LoginRoute,
  PricingRoute: PricingRoute,
  SignupRoute: SignupRoute,
  ApiUserRoute: ApiUserRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
